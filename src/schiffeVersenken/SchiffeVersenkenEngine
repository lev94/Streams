package schiffeVersenken;

import transmission.DataConnection;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class SchiffeVersenkenEngine implements SchiffeVersenkenReceive, SchiffeVersenkenSender {
    public static final int UNDEFINE_DICE = -1;

    private SchiffeVersenkenStatus status;
    private int sentDice = UNDEFINE_DICE;

    private final DataConnection connection;
    private final DataInputStream dis;
    private SchiffeVersenkenSender storage;
    private int counter = 0; // z채hlt die Treffer

    public static final int DIM = 10;

    SVBoardField[][] board = new SVBoardField[DIM][DIM];
    SVBoardField[][] otherBoard = new SVBoardField[DIM][DIM];

    int x, y;
    int zeile, spalte;
    private int receivedRandom;


    public SchiffeVersenkenEngine(DataConnection connection, DataInputStream dis) {
        this.connection = connection;
        this.dis = dis;
        this.status = SchiffeVersenkenStatus.START;
    }

    @Override
    public void reihenfolgeWuerfelnReceive(int zahl) throws IOException, StatusException {
        if (this.status != SchiffeVersenkenStatus.START &&
            this.status != SchiffeVersenkenStatus.DICE_SENT) {
            throw new StatusException();
        }

        this.receivedRandom = zahl;

        if (this.status == SchiffeVersenkenStatus.DICE_SENT) {
            this.decideWhoStarts();
        }else {
            this.status = SchiffeVersenkenStatus.DICE_RECEIVED;
        }

    }

    @Override
    public void koordinateReceive(int zeile, int spalte) throws StatusException, SVExeption {
        if (this.status != SchiffeVersenkenStatus.VERSENKEN_EMPFANGEN) {
            throw new StatusException();
        }
        this.status = SchiffeVersenkenStatus.VERSENKEN_EMPFANGEN;

        this.checkValidSet(zeile, spalte);

        this.board[zeile][spalte] = SVBoardField.GESCHOSSEN;

        this.status = SchiffeVersenkenStatus.BESTAETIGEN_SENDEN;
    }

    @Override
    public void kapitulationReceive() throws StatusException {
        if (this.status != SchiffeVersenkenStatus.VERSENKEN_EMPFANGEN) {
            throw new StatusException();
        }

        this.status = SchiffeVersenkenStatus.WON;

    }

    @Override
    public void bestaetigenSend(int zahl) throws StatusException, IOException {
        if (this.status != SchiffeVersenkenStatus.BESTAETIGEN_SENDEN) {
            throw new StatusException();
        }

        Scanner scan = new Scanner(System.in);
        System.out.println("0 = Treffer, 1 = Verfehlt, 2 = Versenkt");
        zahl = scan.nextInt();

        // Koordinaten 체ber TCP senden
        DataOutputStream dos = this.connection.getDataOutputStream();
        dos.writeInt(zahl);

        if (zahl == 0) {
            this.status = SchiffeVersenkenStatus.VERSENKEN_SENDEN;
        }
        else if (zahl == 1) {
            this.board[zeile][spalte] = SVBoardField.TREFFER;
            counter++;
            this.status = SchiffeVersenkenStatus.VERSENKEN_SENDEN;
        }

        // Kontrollieren ob alle Schiffe versenkt worden
        else if (zahl == 2){
            this.board[zeile][spalte] = SVBoardField.TREFFER;
            counter++;
            if (counter == 30)
                this.status = SchiffeVersenkenStatus.LOST;
            else
                this.status = SchiffeVersenkenStatus.VERSENKEN_SENDEN;
        }

    }


    //////////////////////// Sender /////////////////////////

    @Override
    public void doDice() throws StatusException {
        if (this.status != SchiffeVersenkenStatus.START
            && this.status != SchiffeVersenkenStatus.DICE_RECEIVED) {
            throw new StatusException();
        }

        Random r = new Random();
        this.sentDice = r.nextInt(6)+1;

        if (this.status == SchiffeVersenkenStatus.DICE_RECEIVED) {
            this.decideWhoStarts();
        } else {
            this.status = SchiffeVersenkenStatus.DICE_SENT;
        }

    }

    private void decideWhoStarts() {
        if (this.sentDice == this.receivedRandom) {
            status = SchiffeVersenkenStatus.START;
        }
        else if (this.sentDice < this.receivedRandom) {
            status = SchiffeVersenkenStatus.VERSENKEN_EMPFANGEN;
        }
        else
            status = SchiffeVersenkenStatus.VERSENKEN_SENDEN;
    }

    @Override
    public void koordinateSend(int zeile, int spalte) throws StatusException, IOException, SVExeption {
        if (this.status != SchiffeVersenkenStatus.VERSENKEN_SENDEN) {
            throw new StatusException();
        }
        this.status = SchiffeVersenkenStatus.VERSENKEN_SENDEN;

        this.checkValidSet(x, y);


    }

    private void checkValidSet(int x, int y) throws SVExeption {
        if (x >= DIM || y >= DIM || x < 0 || y < 0) {
            throw new SVExeption("ung체ltige Eingabe");
        }

        if (this.board[x][y] != SVBoardField.LEER) {
            throw new SVExeption("Koordinaten bereits gew채hlt");
        }
    }

    @Override
    public void kapitulationSend() throws StatusException {
        if (this.status != SchiffeVersenkenStatus.VERSENKEN_SENDEN) {
            throw new StatusException();
        }

        this.status = SchiffeVersenkenStatus.LOST;
    }

    @Override
    public void bestaetigenreceive(int zahl) throws StatusException {
        if (this.status != SchiffeVersenkenStatus.BESTAETIGEN_EMPFANGEN) {
            throw new StatusException();
        }
        this.status = SchiffeVersenkenStatus.BESTAETIGEN_EMPFANGEN;

        // read from tcp
        try {
            zahl = dis.readInt();

            // write into machine
            this.storage.bestaetigenreceive(zahl);
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (zahl == 0) {
            this.status = SchiffeVersenkenStatus.VERSENKEN_EMPFANGEN;
        }
        else if (zahl == 1) {
            this.board[zeile][spalte] = SVBoardField.TREFFER;
            counter++;
            this.status = SchiffeVersenkenStatus.VERSENKEN_EMPFANGEN;
        }

        // Kontrollieren ob alle Schiffe versenkt worden
        else if (zahl == 2){
            this.board[zeile][spalte] = SVBoardField.TREFFER;
            counter++;
            if (counter == 30)
                this.status = SchiffeVersenkenStatus.WON;
            else
                this.status = SchiffeVersenkenStatus.VERSENKEN_EMPFANGEN;

        }
    }
}
